/*
 * This file is generated by jOOQ.
 */
package org.example.spring.tutorial.generated.tables.daos;


import java.util.List;

import org.example.spring.tutorial.generated.tables.Person;
import org.example.spring.tutorial.generated.tables.records.PersonRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonDao extends DAOImpl<PersonRecord, org.example.spring.tutorial.generated.tables.pojos.Person, Integer> {

    /**
     * Create a new PersonDao without any configuration
     */
    public PersonDao() {
        super(Person.PERSON, org.example.spring.tutorial.generated.tables.pojos.Person.class);
    }

    /**
     * Create a new PersonDao with an attached configuration
     */
    public PersonDao(Configuration configuration) {
        super(Person.PERSON, org.example.spring.tutorial.generated.tables.pojos.Person.class, configuration);
    }

    @Override
    public Integer getId(org.example.spring.tutorial.generated.tables.pojos.Person object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Person> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Person.PERSON.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Person> fetchById(Integer... values) {
        return fetch(Person.PERSON.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.example.spring.tutorial.generated.tables.pojos.Person fetchOneById(Integer value) {
        return fetchOne(Person.PERSON.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Person> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Person.PERSON.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Person> fetchByName(String... values) {
        return fetch(Person.PERSON.NAME, values);
    }

    /**
     * Fetch records that have <code>idd BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Person> fetchRangeOfIdd(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Person.PERSON.IDD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>idd IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Person> fetchByIdd(Integer... values) {
        return fetch(Person.PERSON.IDD, values);
    }
}
